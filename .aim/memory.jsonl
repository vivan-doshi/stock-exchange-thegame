{"type":"_aim","source":"mcp-knowledge-graph"}
{"type":"entity","name":"Stock_Exchange_Game_Logic","entityType":"implementation","observations":["Created three core game logic modules in src/lib/game/","deck.ts: Manages deck generation (60 cards standard, 120 extended), shuffling with Fisher-Yates algorithm, and card drawing","validator.ts: Validates stock transactions including canBuyStock (checks sum >= 0 or first buyer exception), validatePurchase, validateSale, validateShort for Investor mode","calculator.ts: Handles price calculations, ownership percentages, net worth calculations, and advanced features like options, dividends, buybacks","All modules use TypeScript with proper types and comprehensive JSDoc comments","Supports both Standard (2-6 players) and Extended (7-12 players) variants","Covers all three game modes: Trader, Investor, and Strategist"]}
{"type":"entity","name":"Card_Distribution","entityType":"game_rule","observations":["Atlas Bank: 4 cards (-10, -5, +5, +10)","Titan Steel: 6 cards (-15, -10, -5, +5, +10, +15)","Global Industries: 6 cards (-15, -10, -5, +5, +10, +15)","Omega Energy: 8 cards (-20, -15, -10, -5, +5, +10, +15, +20)","VitalCare Pharma: 10 cards (-25, -20, -15, -10, -5, +5, +10, +15, +20, +25)","NovaTech: 12 cards (-30, -25, -20, -15, -10, -5, +5, +10, +15, +20, +25, +30)","Special Cards: 14 total (Loan Stocks Matured, Debenture, Rights Issued, Share Suspended, Currency +10%, Currency -10%)","Total: 46 price cards + 14 special cards = 60 cards (standard), 120 cards (extended with duplication)"]}
{"type":"entity","name":"Database_Schema","entityType":"database","observations":["Database is already compatible with the new game logic modules","Cards stored as JSONB in game_players.current_cards table","Stock holdings, short positions, and option positions stored as JSONB","games table has stock_prices and share_supply as JSONB fields","deck_multiplier column: 1 for standard, 2 for extended variant","Complete transaction logging in transactions table","Historical price tracking in stock_prices table","Player holdings snapshots in player_holdings table","Director and chairman status tracked in director_of and chairman_of JSONB arrays","No database migration needed - schema already supports the game logic modules"]}
{"type":"entity","name":"Game_Variants","entityType":"game_configuration","observations":["Standard Variant: 2-6 players, 600k starting capital, 200k shares per stock, Director 25% (50k shares), Chairman 50% (100k shares), 108 cards (1x deck)","Extended Variant: 7-12 players, 450k starting capital, 300k shares per stock, Director 20% (60k shares), Chairman 40% (120k shares), 216 cards (2x deck)","Game has 10 rounds (market years), maximum 3 transactions per round","Six stocks: Atlas Bank, Titan Steel, Global Industries, Omega Energy, VitalCare Pharma, NovaTech","Three game modes: Trader (basic), Investor (adds shorting), Strategist (adds options, dividends, buybacks)"]}
{"type":"entity","name":"Stock Exchange Game Transaction System","entityType":"feature","observations":["Implemented complete transaction execution service in src/lib/game/transactionService.ts","Created executeBuyTransaction() function that validates purchases, updates player portfolios, calculates ownership levels (director 25%/20%, chairman 50%/40%), and updates share supply","Created executeSellTransaction() function that validates sales, updates portfolios, adjusts ownership status, and returns shares to market","Created advanceTransaction() function that progresses through transactions (1-3) and rounds, automatically detecting game completion","Buy/sell transactions validate minimum 1000 shares, 1000 share increments, minimum $5000 transaction value","Ownership levels calculated based on game variant: standard (25% director, 50% chairman) vs extended (20% director, 40% chairman)"]}
{"type":"entity","name":"Game Board Real-time Subscriptions","entityType":"feature","observations":["Implemented Supabase real-time subscriptions in GameBoard.tsx","Subscribes to games table updates filtered by game_id to track round/transaction changes","Subscribes to game_players table updates to track all player portfolio changes","Updates automatically propagate to all connected players when any transaction occurs","Proper cleanup on component unmount to prevent memory leaks","All players see instant updates: stock holdings, cash balances, share supply, ownership status, round progress"]}
{"type":"entity","name":"Transaction Modal Components","entityType":"component","observations":["Created BuyModal component in src/components/GameBoard/BuyModal.tsx with stock selector, quantity inputs (+1k/-1k, +10k/-10k buttons), real-time cost calculation, cash validation","Created SellModal component in src/components/GameBoard/SellModal.tsx with owned stocks filter, sell all button, quantity validation against holdings","Both modals show transaction summaries with total cost/proceeds, remaining cash/shares","Validation errors displayed inline with helpful messages","Modal state managed in GameBoard parent component"]}
{"type":"entity","name":"Card Reveal Animation","entityType":"component","observations":["Created CardRevealAnimation component in src/components/GameBoard/CardRevealAnimation.tsx","Staggered card reveal animation with 500ms delay between cards","Price cards show company name, trend icon (up/down), value with color coding (green for positive, red for negative)","Special cards show alert icon and formatted card type name","Supports callback when reveal animation completes","Full-screen overlay with backdrop blur effect"]}
{"type":"entity","name":"Game Transaction Flow","entityType":"process","observations":["Transaction flow: User action → Modal/validation → Database update → Real-time broadcast → UI refresh","BUY button opens BuyModal, on confirm calls executeBuyTransaction() then advanceTransaction()","SELL button opens SellModal, on confirm calls executeSellTransaction() then advanceTransaction()","PASS button calls executePassTransaction() then advanceTransaction()","Buttons disabled during processing to prevent double-submission","Error messages displayed via alerts with specific failure reasons","All database updates happen in transactionService functions using Supabase client"]}
{"type":"entity","name":"stock-exchange-game-architecture","entityType":"project","observations":["Game state manager implemented in src/lib/game/gameState.ts","Handles game initialization, transaction execution, turn management, and game flow","Uses Supabase for database operations and Realtime for broadcasting state changes","Integrates with transactionService.ts, calculator.ts, and deck.ts modules"]}
{"type":"entity","name":"gameState-module","entityType":"code_module","observations":["Located at src/lib/game/gameState.ts","Main functions: initializeGame, executeTransaction, advanceToNextPlayer, endRound, endGame","initializeGame sets starting prices ($100/stock), gives players capital ($600k standard/$450k extended), creates shuffled deck","executeTransaction handles buy/sell/pass actions with card drawing and price updates","advanceToNextPlayer manages turn rotation, transaction advancement (1-3), round advancement (1-10), and game ending","endRound processes special cards and updates player net worth","endGame calculates final rankings, determines winner by net worth, updates statistics","All state changes broadcast via Supabase Realtime channels using pattern game:{gameId}","Broadcasts events: game_started, transaction_completed, transaction_advanced, round_advanced, round_ended, game_ended","Added turn validation at start of executeTransaction function using validatePlayerTurn","Players receive error 'It is not your turn' if attempting to act out of turn","Imports turnManager module for turn validation"]}
{"type":"entity","name":"game-flow-logic","entityType":"game_mechanic","observations":["Each game has 10 rounds with 3 transactions per round","Turn order rotates through players with dealer position advancing each transaction","Buy action: draws 3 cards, validates purchase, deducts money, adds shares, calculates new price, updates ownership","Sell action: removes shares, adds money, updates ownership status","Pass action: just advances to next player","Stock prices calculated from card values (can't go below $0)","Game ends after 10 rounds, winner determined by highest net worth","Turn order managed by dealer_position field in games table","dealer_position rotates through player positions (1, 2, 3, etc.) after each transaction","Turn validation enforces one-by-one player turns","Real-time updates broadcast when dealer_position changes"]}
{"type":"entity","name":"database-schema-details","entityType":"database_schema","observations":["games table: stores game_id, mode, variant, status, current_round, current_transaction, dealer_position, stock_prices (JSONB), share_supply (JSONB)","game_players table: stores player_id, game_id, user_id, player_position, cash_balance, net_worth, stock_holdings (JSONB), director_of, chairman_of, final_rank, final_net_worth","transactions table: logs all game actions with transaction_id, game_id, player_id, round_number, transaction_number, transaction_type, stock_symbol, quantity, price_per_share, total_amount, cash_before, cash_after, details (JSONB)","Six stock symbols: atlas_bank, titan_steel, global_industries, omega_energy, vitalcare_pharma, novatech","Standard variant: 2-6 players, 600k capital, 200k shares per stock","Extended variant: 7-12 players, 450k capital, 300k shares per stock","dealer_position field tracks which player's turn it is (matches player_position)","Transaction history includes player names via join with game_profiles table"]}
{"type":"entity","name":"pending-implementations","entityType":"todo_list","observations":["Deck storage needs full implementation - currently mocked in drawCardsForStock function","May need separate deck_state table or store as JSONB in games table","Special card processing in endRound needs game-specific rules implementation","Player statistics updates (wins, games played) needed in endGame function","Turn management may need adjustment based on specific game rules"]}
{"type":"entity","name":"turnManager-module","entityType":"code_module","observations":["Located at src/lib/game/turnManager.ts","getCurrentTurnInfo() returns current player info and isYourTurn boolean","validatePlayerTurn() checks if playerId matches current dealer_position","advanceToNextPlayer() rotates dealer_position to next player","getPlayersInTurnOrder() returns all players with active status","Uses dealer_position from games table to determine current player","Broadcasts turn_changed event via Supabase Realtime","Queries game_profiles table for player display names"]}
{"type":"entity","name":"TransactionHistory-component","entityType":"ui_component","observations":["Located at src/components/GameBoard/TransactionHistory.tsx","Shows recent transactions for current round","Real-time updates via Supabase Realtime subscription on transactions table","Displays player name, action type (Buy/Sell/Pass), stock symbol, quantity, price","Color-coded: green for sells (+money), red for buys (-money), gray for pass","Shows transaction number (T1, T2, T3)","Scrollable list with custom scrollbar styling","Fetches transactions joined with game_players and game_profiles for player names"]}
{"type":"entity","name":"TransactionPanel-component","entityType":"ui_component","observations":["Located at src/components/GameBoard/TransactionPanel.tsx","Updated with turn indicator showing current player name","Shows YOUR TURN with pulsing green dot when isYourTurn=true","Shows WAITING with orange dot when isYourTurn=false","Displays waiting message when not your turn","Buy/Sell/Pass buttons disabled based on canAct prop","canAct determined by: !isProcessing && isYourTurn","Receives isYourTurn and currentPlayerName props from GameBoard"]}
{"type":"entity","name":"multiplayer-turn-system","entityType":"feature","observations":["Enforces one-by-one player turns through turn validation","dealer_position field rotates after each transaction","All players see real-time updates of whose turn it is","Buttons disabled for non-active players","Transaction history shows all player actions in real-time","Turn changes broadcast via Supabase Realtime postgres_changes on games table","GameBoard component listens for game state updates and refreshes turn info","Players can see who made what transaction and when"]}
{"type":"entity","name":"turn-system-fixes","entityType":"implementation","observations":["Fixed turn loading issue by splitting Supabase queries for game_players and game_profiles","Used Map data structures for efficient profile lookups instead of nested joins","Added dealer_position initialization to 1 in gameInitialization.ts","Integrated turn validation in all transaction functions (buy, sell, pass)","Added advanceToNextPlayer call in advanceTransaction function","Turn advancement happens after each player action","dealer_position rotates from 1 to N players using modulo arithmetic","Added comprehensive console logging for debugging turn flow","Real-time turn updates work via Supabase postgres_changes on games table"]}
{"type":"entity","name":"transaction-history-fixes","entityType":"implementation","observations":["Fixed TransactionHistory component to use separate queries instead of nested joins","Added transaction logging to executeBuyTransaction, executeSellTransaction, and executePassTransaction","Transactions record player_id, round_number, transaction_number, stock_symbol, quantity, price_per_share, total_amount, cash_before, cash_after","Changed display to prioritize username over display_name for player identification","Added refreshTrigger prop to force TransactionHistory refresh on game state updates","Created migration 014_enable_transactions_realtime.sql to enable Realtime for transactions table","Added comprehensive console logging for debugging transaction history","TransactionHistory refreshes whenever game state updates via refreshTrigger"]}
{"type":"entity","name":"turnManager-module-updates","entityType":"code-module","observations":["File: src/lib/game/turnManager.ts","getCurrentTurnInfo() splits queries for players and profiles, uses Map for lookups","advanceToNextPlayer() calculates next position with modulo, updates dealer_position in database","getPlayersInTurnOrder() returns all players with isActive flag based on dealer_position","validatePlayerTurn() checks if player_position matches dealer_position","All functions prioritize username over display_name for consistent player identification","Extensive console logging added for debugging turn flow","Broadcasts turn_changed event via Supabase Realtime channel"]}
{"type":"entity","name":"transactionService-module-updates","entityType":"code-module","observations":["File: src/lib/game/transactionService.ts","Imports validatePlayerTurn and advanceToNextPlayer from turnManager","executeBuyTransaction validates turn, executes purchase, logs to transactions table","executeSellTransaction validates turn, executes sale, logs to transactions table","executePassTransaction validates turn, logs pass as card_effect type with zero amount","advanceTransaction calls advanceToNextPlayer before advancing round/transaction counters","Transaction logging includes all required fields for audit trail","Added console logging for debugging transaction flow"]}
{"type":"entity","name":"GameBoard-component-updates","entityType":"react-component","observations":["File: src/components/GameBoard/GameBoard.tsx","Added transactionRefreshTrigger state to force TransactionHistory updates","Real-time subscription listens to games table UPDATE events","When game state updates, fetches new turn info and increments transactionRefreshTrigger","Passes refreshTrigger prop to TransactionHistory component","Closes modals after successful transactions","Added comprehensive console logging for debugging real-time updates","Logs dealer_position changes, turn info updates, and isYourTurn status"]}
{"type":"entity","name":"TransactionHistory-component-updates","entityType":"react-component","observations":["File: src/components/GameBoard/TransactionHistory.tsx","Accepts refreshTrigger prop to force re-fetching transactions","Fetches transactions with separate queries for players and profiles","Uses Map data structures for efficient lookups","Displays username instead of display_name for player identification","Subscribes to postgres_changes INSERT events on transactions table","Added extensive console logging for debugging data flow","Shows transaction type, player name, stock, quantity, price, and amount","Color codes amounts (red for buy, green for sell)"]}
{"type":"entity","name":"supabase-realtime-configuration","entityType":"database-configuration","observations":["Migration 013_enable_realtime.sql enables Realtime for games and game_players tables","Migration 014_enable_transactions_realtime.sql created to enable Realtime for transactions table","User needs to manually apply migration to remote Supabase project","SQL command: ALTER PUBLICATION supabase_realtime ADD TABLE transactions;","Without Realtime enabled on transactions, only refreshTrigger method works for updates","With Realtime enabled, TransactionHistory will receive instant INSERT notifications"]}
{"type":"entity","name":"game-flow-implementation","entityType":"game-logic","observations":["Each round has 3 transactions maximum","Turn order rotates through all players using dealer_position","dealer_position starts at 1 when game initializes","After each player action, dealer_position advances to next player","When dealer_position exceeds player count, it wraps back to 1","Game state updates trigger real-time UI updates across all clients","Turn validation prevents out-of-turn actions","All transactions logged to database for audit trail and history display"]}
{"type":"entity","name":"turn-system-mechanics","entityType":"game-mechanic","observations":["Dealer position stays FIXED for entire round (all 3 transactions)","Dealer position only rotates at the end of each round","Dealer position is used for special card mechanics","Current player position rotates after each player's turn","Current player position determines whose turn it is","Current player position cycles through all players for each transaction","When current_player_position cycles back to 1, transaction number increments","When all 3 transactions complete, round increments and dealer rotates"]}
{"type":"entity","name":"migration-017-current-player-position","entityType":"database-migration","observations":["Adds current_player_position column to games table","Default value is 1","Has CHECK constraint (current_player_position >= 1)","Updates existing games to set current_player_position = dealer_position","Separates turn tracking from dealer tracking for special card mechanics"]}
{"type":"entity","name":"turn-manager-refactor","entityType":"code-refactor","observations":["getCurrentTurnInfo now uses current_player_position instead of dealer_position","validatePlayerTurn checks player_position against current_player_position","advanceToNextPlayer updates current_player_position (not dealer_position)","getPlayersInTurnOrder checks isActive against current_player_position","All turn validation based on current_player_position"]}
{"type":"entity","name":"transaction-service-dealer-rotation","entityType":"code-implementation","observations":["advanceTransaction checks if current_player_position cycled back to 1","When cycled to 1, all players completed transaction, increment transaction number","After transaction 3, advances to next round","Round advancement rotates dealer_position to next player","Round advancement resets current_player_position to 1","Dealer rotation formula: (currentDealerPosition % playerCount) + 1"]}
{"type":"entity","name":"game-initialization-turn-setup","entityType":"code-implementation","observations":["Initializes both dealer_position and current_player_position to 1","Sets current_round to 1 and current_transaction to 1","Both positions start at player 1 at game start"]}
{"type":"entity","name":"turn-flow-example-2-players","entityType":"game-flow","observations":["Transaction 1: P1 acts (pos=1) → pos=2, P2 acts (pos=2) → pos=1, tx=2","Transaction 2: P1 acts (pos=1) → pos=2, P2 acts (pos=2) → pos=1, tx=3","Transaction 3: P1 acts (pos=1) → pos=2, P2 acts (pos=2) → pos=1, round=2, dealer=2","Round 2: Dealer is now position 2, current_player_position resets to 1","Each player gets exactly 1 action per transaction","Each round has 3 transactions with 2 players = 6 total actions per round"]}
{"type":"entity","name":"turn-switching-race-condition-bug","entityType":"bug","observations":["Race condition prevented turn from switching from Player 2 to Player 1","Player update subscription was overwriting isYourTurn state before advanceTransaction completed","Player cash/holdings update triggered playerChannel subscription which called getCurrentTurnInfo with OLD database state","Subscription set isYourTurn=true for Player 2 even after manual setIsYourTurn(false)","Allowed Player 2 to make multiple transactions before turn advanced","Fixed by adding isProcessing check to real-time subscriptions to prevent turn info refresh during transaction processing","Fixed by manually calling getCurrentTurnInfo after advanceTransaction completes to get updated state","Fixed by immediate setIsYourTurn(false) for UI-level protection against rapid clicks"]}
{"type":"entity","name":"share-ownership-display-delay-bug","entityType":"bug","observations":["Share ownership display under stock cards had a delay showing updated holdings","allPlayers state was only updated on initial load, not when players made transactions","Fixed by adding real-time refresh of allPlayers data in player subscription","When any player's holdings change, fetch ALL players data and update state","Located in GameBoard.tsx lines 119-141","Now triggers immediate re-render of stock cards with updated shareholder info"]}
{"type":"entity","name":"gameboard-transaction-handlers-fix","entityType":"code-fix","observations":["Updated handleBuyConfirm, handleSellConfirm, and handlePass in GameBoard.tsx","Added isProcessing check to prevent subscription overwrites during transaction","Set isYourTurn to false immediately after successful transaction","Call advanceTransaction to update database","Wait 300ms for database commit","Manually refresh turn info by calling getCurrentTurnInfo","Prevents race conditions between manual state updates and real-time subscriptions","Located in GameBoard.tsx lines 318-352 (buy), 374-408 (sell), 424-455 (pass)"]}
{"type":"entity","name":"gameboard-realtime-subscription-fix","entityType":"code-fix","observations":["Added isProcessing to useEffect dependencies for real-time subscriptions","Added !isProcessing check before refreshing turn info in game state subscription (line 82)","Added !isProcessing check before refreshing turn info in player subscription (line 145)","Added real-time allPlayers refresh in player subscription (lines 119-141)","Prevents subscription callbacks from overwriting manual state updates during transaction processing","Added logging for current_player_position changes (line 76)","Located in GameBoard.tsx lines 59-161"]}
{"type":"entity","name":"transaction-processing-flow","entityType":"implementation-pattern","observations":["Step 1: Set isProcessing=true to block subscription updates","Step 2: Execute transaction (buy/sell/pass) and update database","Step 3: Set isYourTurn=false to prevent double-clicks","Step 4: Call advanceTransaction to update current_player_position","Step 5: Wait 300ms for database commit","Step 6: Manually call getCurrentTurnInfo to get fresh state","Step 7: Update UI state with new turn info","Step 8: Set isProcessing=false to re-enable subscriptions","Real-time subscriptions provide backup/redundancy but don't interfere during processing"]}
{"type":"entity","name":"isProcessing-state-guard","entityType":"implementation-pattern","observations":["Boolean state flag used to prevent race conditions during async operations","Set to true at start of transaction handlers","Set to false in finally block to ensure cleanup","Used as guard in real-time subscription callbacks","Prevents subscription updates from overwriting manual state changes","Critical for maintaining turn order integrity in multiplayer game","Pattern: manual update + guard against automatic updates + eventual consistency"]}
{"type":"relation","from":"Stock_Exchange_Game_Logic","to":"Database_Schema","relationType":"integrates_with"}
{"type":"relation","from":"Stock_Exchange_Game_Logic","to":"Card_Distribution","relationType":"implements"}
{"type":"relation","from":"Stock_Exchange_Game_Logic","to":"Game_Variants","relationType":"supports"}
{"type":"relation","from":"Card_Distribution","to":"Game_Variants","relationType":"defines_for"}
{"type":"relation","from":"Stock Exchange Game Transaction System","to":"Game Board Real-time Subscriptions","relationType":"triggers_updates_in"}
{"type":"relation","from":"Transaction Modal Components","to":"Stock Exchange Game Transaction System","relationType":"calls_functions_from"}
{"type":"relation","from":"Game Board Real-time Subscriptions","to":"Transaction Modal Components","relationType":"updates_data_for"}
{"type":"relation","from":"Card Reveal Animation","to":"Game Transaction Flow","relationType":"part_of"}
{"type":"relation","from":"stock-exchange-game-architecture","to":"gameState-module","relationType":"contains"}
{"type":"relation","from":"gameState-module","to":"game-flow-logic","relationType":"implements"}
{"type":"relation","from":"gameState-module","to":"database-schema-details","relationType":"uses"}
{"type":"relation","from":"stock-exchange-game-architecture","to":"pending-implementations","relationType":"has"}
{"type":"relation","from":"stock-exchange-game-architecture","to":"turnManager-module","relationType":"contains"}
{"type":"relation","from":"stock-exchange-game-architecture","to":"TransactionHistory-component","relationType":"contains"}
{"type":"relation","from":"stock-exchange-game-architecture","to":"TransactionPanel-component","relationType":"contains"}
{"type":"relation","from":"stock-exchange-game-architecture","to":"multiplayer-turn-system","relationType":"implements"}
{"type":"relation","from":"gameState-module","to":"turnManager-module","relationType":"uses"}
{"type":"relation","from":"TransactionPanel-component","to":"turnManager-module","relationType":"displays_data_from"}
{"type":"relation","from":"TransactionHistory-component","to":"database-schema-details","relationType":"queries"}
{"type":"relation","from":"multiplayer-turn-system","to":"game-flow-logic","relationType":"enforces"}
{"type":"relation","from":"turn-system-fixes","to":"turnManager-module-updates","relationType":"implements"}
{"type":"relation","from":"turn-system-fixes","to":"transactionService-module-updates","relationType":"implements"}
{"type":"relation","from":"turn-system-fixes","to":"GameBoard-component-updates","relationType":"implements"}
{"type":"relation","from":"transaction-history-fixes","to":"TransactionHistory-component-updates","relationType":"implements"}
{"type":"relation","from":"transaction-history-fixes","to":"GameBoard-component-updates","relationType":"implements"}
{"type":"relation","from":"transaction-history-fixes","to":"supabase-realtime-configuration","relationType":"requires"}
{"type":"relation","from":"turnManager-module-updates","to":"game-flow-implementation","relationType":"enforces"}
{"type":"relation","from":"transactionService-module-updates","to":"turnManager-module-updates","relationType":"uses"}
{"type":"relation","from":"GameBoard-component-updates","to":"turnManager-module-updates","relationType":"uses"}
{"type":"relation","from":"GameBoard-component-updates","to":"TransactionHistory-component-updates","relationType":"contains"}
{"type":"relation","from":"TransactionHistory-component-updates","to":"supabase-realtime-configuration","relationType":"depends-on"}
{"type":"relation","from":"migration-017-current-player-position","to":"turn-system-mechanics","relationType":"implements"}
{"type":"relation","from":"turn-manager-refactor","to":"migration-017-current-player-position","relationType":"depends_on"}
{"type":"relation","from":"transaction-service-dealer-rotation","to":"turn-system-mechanics","relationType":"implements"}
{"type":"relation","from":"game-initialization-turn-setup","to":"migration-017-current-player-position","relationType":"uses"}
{"type":"relation","from":"turn-flow-example-2-players","to":"turn-system-mechanics","relationType":"demonstrates"}
{"type":"relation","from":"turn-manager-refactor","to":"turn-system-mechanics","relationType":"enforces"}
{"type":"relation","from":"turn-switching-race-condition-bug","to":"gameboard-transaction-handlers-fix","relationType":"fixed_by"}
{"type":"relation","from":"turn-switching-race-condition-bug","to":"gameboard-realtime-subscription-fix","relationType":"fixed_by"}
{"type":"relation","from":"turn-switching-race-condition-bug","to":"isProcessing-state-guard","relationType":"solved_using"}
{"type":"relation","from":"share-ownership-display-delay-bug","to":"gameboard-realtime-subscription-fix","relationType":"fixed_by"}
{"type":"relation","from":"gameboard-transaction-handlers-fix","to":"transaction-processing-flow","relationType":"implements"}
{"type":"relation","from":"gameboard-transaction-handlers-fix","to":"isProcessing-state-guard","relationType":"uses"}
{"type":"relation","from":"gameboard-realtime-subscription-fix","to":"isProcessing-state-guard","relationType":"uses"}
{"type":"relation","from":"transaction-processing-flow","to":"turn-manager-refactor","relationType":"depends_on"}
{"type":"relation","from":"gameboard-transaction-handlers-fix","to":"migration-017-current-player-position","relationType":"requires"}
{"type":"relation","from":"turn-switching-race-condition-bug","to":"turn-system-mechanics","relationType":"violated"}