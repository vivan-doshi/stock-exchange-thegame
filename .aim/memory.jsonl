{"type":"_aim","source":"mcp-knowledge-graph"}
{"type":"entity","name":"Stock_Exchange_Game_Logic","entityType":"implementation","observations":["Created three core game logic modules in src/lib/game/","deck.ts: Manages deck generation (60 cards standard, 120 extended), shuffling with Fisher-Yates algorithm, and card drawing","validator.ts: Validates stock transactions including canBuyStock (checks sum >= 0 or first buyer exception), validatePurchase, validateSale, validateShort for Investor mode","calculator.ts: Handles price calculations, ownership percentages, net worth calculations, and advanced features like options, dividends, buybacks","All modules use TypeScript with proper types and comprehensive JSDoc comments","Supports both Standard (2-6 players) and Extended (7-12 players) variants","Covers all three game modes: Trader, Investor, and Strategist"]}
{"type":"entity","name":"Card_Distribution","entityType":"game_rule","observations":["Atlas Bank: 4 cards (-10, -5, +5, +10)","Titan Steel: 6 cards (-15, -10, -5, +5, +10, +15)","Global Industries: 6 cards (-15, -10, -5, +5, +10, +15)","Omega Energy: 8 cards (-20, -15, -10, -5, +5, +10, +15, +20)","VitalCare Pharma: 10 cards (-25, -20, -15, -10, -5, +5, +10, +15, +20, +25)","NovaTech: 12 cards (-30, -25, -20, -15, -10, -5, +5, +10, +15, +20, +25, +30)","Special Cards: 14 total (Loan Stocks Matured, Debenture, Rights Issued, Share Suspended, Currency +10%, Currency -10%)","Total: 46 price cards + 14 special cards = 60 cards (standard), 120 cards (extended with duplication)"]}
{"type":"entity","name":"Database_Schema","entityType":"database","observations":["Database is already compatible with the new game logic modules","Cards stored as JSONB in game_players.current_cards table","Stock holdings, short positions, and option positions stored as JSONB","games table has stock_prices and share_supply as JSONB fields","deck_multiplier column: 1 for standard, 2 for extended variant","Complete transaction logging in transactions table","Historical price tracking in stock_prices table","Player holdings snapshots in player_holdings table","Director and chairman status tracked in director_of and chairman_of JSONB arrays","No database migration needed - schema already supports the game logic modules"]}
{"type":"entity","name":"Game_Variants","entityType":"game_configuration","observations":["Standard Variant: 2-6 players, 600k starting capital, 200k shares per stock, Director 25% (50k shares), Chairman 50% (100k shares), 108 cards (1x deck)","Extended Variant: 7-12 players, 450k starting capital, 300k shares per stock, Director 20% (60k shares), Chairman 40% (120k shares), 216 cards (2x deck)","Game has 10 rounds (market years), maximum 3 transactions per round","Six stocks: Atlas Bank, Titan Steel, Global Industries, Omega Energy, VitalCare Pharma, NovaTech","Three game modes: Trader (basic), Investor (adds shorting), Strategist (adds options, dividends, buybacks)"]}
{"type":"entity","name":"Stock Exchange Game Transaction System","entityType":"feature","observations":["Implemented complete transaction execution service in src/lib/game/transactionService.ts","Created executeBuyTransaction() function that validates purchases, updates player portfolios, calculates ownership levels (director 25%/20%, chairman 50%/40%), and updates share supply","Created executeSellTransaction() function that validates sales, updates portfolios, adjusts ownership status, and returns shares to market","Created advanceTransaction() function that progresses through transactions (1-3) and rounds, automatically detecting game completion","Buy/sell transactions validate minimum 1000 shares, 1000 share increments, minimum $5000 transaction value","Ownership levels calculated based on game variant: standard (25% director, 50% chairman) vs extended (20% director, 40% chairman)"]}
{"type":"entity","name":"Game Board Real-time Subscriptions","entityType":"feature","observations":["Implemented Supabase real-time subscriptions in GameBoard.tsx","Subscribes to games table updates filtered by game_id to track round/transaction changes","Subscribes to game_players table updates to track all player portfolio changes","Updates automatically propagate to all connected players when any transaction occurs","Proper cleanup on component unmount to prevent memory leaks","All players see instant updates: stock holdings, cash balances, share supply, ownership status, round progress"]}
{"type":"entity","name":"Transaction Modal Components","entityType":"component","observations":["Created BuyModal component in src/components/GameBoard/BuyModal.tsx with stock selector, quantity inputs (+1k/-1k, +10k/-10k buttons), real-time cost calculation, cash validation","Created SellModal component in src/components/GameBoard/SellModal.tsx with owned stocks filter, sell all button, quantity validation against holdings","Both modals show transaction summaries with total cost/proceeds, remaining cash/shares","Validation errors displayed inline with helpful messages","Modal state managed in GameBoard parent component"]}
{"type":"entity","name":"Card Reveal Animation","entityType":"component","observations":["Created CardRevealAnimation component in src/components/GameBoard/CardRevealAnimation.tsx","Staggered card reveal animation with 500ms delay between cards","Price cards show company name, trend icon (up/down), value with color coding (green for positive, red for negative)","Special cards show alert icon and formatted card type name","Supports callback when reveal animation completes","Full-screen overlay with backdrop blur effect"]}
{"type":"entity","name":"Game Transaction Flow","entityType":"process","observations":["Transaction flow: User action → Modal/validation → Database update → Real-time broadcast → UI refresh","BUY button opens BuyModal, on confirm calls executeBuyTransaction() then advanceTransaction()","SELL button opens SellModal, on confirm calls executeSellTransaction() then advanceTransaction()","PASS button calls executePassTransaction() then advanceTransaction()","Buttons disabled during processing to prevent double-submission","Error messages displayed via alerts with specific failure reasons","All database updates happen in transactionService functions using Supabase client"]}
{"type":"entity","name":"stock-exchange-game-architecture","entityType":"project","observations":["Game state manager implemented in src/lib/game/gameState.ts","Handles game initialization, transaction execution, turn management, and game flow","Uses Supabase for database operations and Realtime for broadcasting state changes","Integrates with transactionService.ts, calculator.ts, and deck.ts modules"]}
{"type":"entity","name":"gameState-module","entityType":"code_module","observations":["Located at src/lib/game/gameState.ts","Main functions: initializeGame, executeTransaction, advanceToNextPlayer, endRound, endGame","initializeGame sets starting prices ($100/stock), gives players capital ($600k standard/$450k extended), creates shuffled deck","executeTransaction handles buy/sell/pass actions with card drawing and price updates","advanceToNextPlayer manages turn rotation, transaction advancement (1-3), round advancement (1-10), and game ending","endRound processes special cards and updates player net worth","endGame calculates final rankings, determines winner by net worth, updates statistics","All state changes broadcast via Supabase Realtime channels using pattern game:{gameId}","Broadcasts events: game_started, transaction_completed, transaction_advanced, round_advanced, round_ended, game_ended"]}
{"type":"entity","name":"game-flow-logic","entityType":"game_mechanic","observations":["Each game has 10 rounds with 3 transactions per round","Turn order rotates through players with dealer position advancing each transaction","Buy action: draws 3 cards, validates purchase, deducts money, adds shares, calculates new price, updates ownership","Sell action: removes shares, adds money, updates ownership status","Pass action: just advances to next player","Stock prices calculated from card values (can't go below $0)","Game ends after 10 rounds, winner determined by highest net worth"]}
{"type":"entity","name":"database-schema-details","entityType":"database_schema","observations":["games table: stores game_id, mode, variant, status, current_round, current_transaction, dealer_position, stock_prices (JSONB), share_supply (JSONB)","game_players table: stores player_id, game_id, user_id, player_position, cash_balance, net_worth, stock_holdings (JSONB), director_of, chairman_of, final_rank, final_net_worth","transactions table: logs all game actions with transaction_id, game_id, player_id, round_number, transaction_number, transaction_type, stock_symbol, quantity, price_per_share, total_amount, cash_before, cash_after, details (JSONB)","Six stock symbols: atlas_bank, titan_steel, global_industries, omega_energy, vitalcare_pharma, novatech","Standard variant: 2-6 players, 600k capital, 200k shares per stock","Extended variant: 7-12 players, 450k capital, 300k shares per stock"]}
{"type":"entity","name":"pending-implementations","entityType":"todo_list","observations":["Deck storage needs full implementation - currently mocked in drawCardsForStock function","May need separate deck_state table or store as JSONB in games table","Special card processing in endRound needs game-specific rules implementation","Player statistics updates (wins, games played) needed in endGame function","Turn management may need adjustment based on specific game rules"]}
{"type":"relation","from":"Stock_Exchange_Game_Logic","to":"Database_Schema","relationType":"integrates_with"}
{"type":"relation","from":"Stock_Exchange_Game_Logic","to":"Card_Distribution","relationType":"implements"}
{"type":"relation","from":"Stock_Exchange_Game_Logic","to":"Game_Variants","relationType":"supports"}
{"type":"relation","from":"Card_Distribution","to":"Game_Variants","relationType":"defines_for"}
{"type":"relation","from":"Stock Exchange Game Transaction System","to":"Game Board Real-time Subscriptions","relationType":"triggers_updates_in"}
{"type":"relation","from":"Transaction Modal Components","to":"Stock Exchange Game Transaction System","relationType":"calls_functions_from"}
{"type":"relation","from":"Game Board Real-time Subscriptions","to":"Transaction Modal Components","relationType":"updates_data_for"}
{"type":"relation","from":"Card Reveal Animation","to":"Game Transaction Flow","relationType":"part_of"}
{"type":"relation","from":"stock-exchange-game-architecture","to":"gameState-module","relationType":"contains"}
{"type":"relation","from":"gameState-module","to":"game-flow-logic","relationType":"implements"}
{"type":"relation","from":"gameState-module","to":"database-schema-details","relationType":"uses"}
{"type":"relation","from":"stock-exchange-game-architecture","to":"pending-implementations","relationType":"has"}